openapi: 3.0.1
info:
  title: SBanken
  description: SBanken Beta API
  version: "2.0"
servers:
  - url: https://publicapi.sbanken.no/apibeta
paths:
  /api/v2/Transfers:
    post:
      tags:
        - Transfers
      summary: This operation executes a transfer between two accounts.
      operationId: Transfers_Create
      requestBody:
        description:
          "The details of the transfer to be executed. The fields are as\
          \ follows:\\\n            \\\n            **FromAccountId:** The `accountId`\
          \ of the account that the amount is to be transferred from, i.e. the debit\
          \ account. The account must be one owned by the customer, or an account\
          \ the customer has been granted access to. An account's `accountId` can\
          \ be retrieved with the list or read operation on the Accounts service.\\\
          \n            \\\n            **ToAccountId:** The `accountId` of the account\
          \ that the amount is to be transferred to, i.e. the credit account. The\
          \ account must be one owned by the customer, or an account the customer\
          \ has been granted access to. An account's `accountId` can be retrieved\
          \ with the list or read operation on the Accounts service.\\\n         \
          \   \\\n            **Amount:** A decimal number representing the amount\
          \ to be transferred. Must be equal to or greater than `1.00` and less than\
          \ `100000000000000000.00` (sic!). Transfers with amounts in excess of the\
          \ current debit account available amount will fail. Transfer currency is\
          \ NOK.\\\n            \\\n            **Message:** A description of the\
          \ transfer. Must be between 1 and 30 characters. The following characters\
          \ are allowed: `1234567890aAbBcCdDeEfFgGhHi IjJkKlLmMnNoOpPqQrRsStTuUvVwW\
          \ xXyYzZæÆøØåÅäÄëËïÏöÖüÜÿâÂêÊîÎ ôÔûÛãÃñÑõÕàÀèÈìÌòÒùÙáÁéÉí ÍóÓýÝ,;.:!-/()?`,\
          \ and `space`.\n            "
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferCreateRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/TransferCreateRequest"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TransferCreateRequest"
        required: true
      responses:
        200:
          description: This operation returns HTTP 200 NoContent
          content:
            "*/*":
              schema:
                type: string
                format: binary
      x-codegen-request-body-name: value
  /api/v2/Transactions/{accountId}:
    get:
      tags:
        - Transactions
      summary: Get Transactions
      operationId: Transactions_List
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's accountId can be retrieved with the list or read operation
            on the Accounts service.
          required: true
          schema:
            type: string
            nullable: true
        - name: startDate
          in: query
          description:
            "*Optional*. The start of the query time span. Must be less than
            or equal to `endDate`, and less than or equal to the current date + 1 day.
            Default value is `endDate` -30 days. Minimum value is `2000-01-01`"
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            "*Optional*. The end of the query time span. Must be greater
            than or equal to `startDate`, and less than or equal to the current date
            +1 day. Query cannot span more than 366 days. Default value is the current
            date."
          schema:
            type: string
            format: date-time
            nullable: true
        - name: index
          in: query
          description:
            "*Optional*. The `index` of the first item to be retrieved. Minimum
            value is `0`, which is the first item within the query time span. Default
            value is `0`."
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
            nullable: true
        - name: length
          in: query
          description:
            "*Optional*. Return a number of items items up to this value.
            Minimum value is `1`, maximum value is `1000`. The default value is `100`."
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            nullable: true
      responses:
        200:
          description: The list of transactions.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfTransaction"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfTransaction"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfTransaction"
  /api/v2/Transactions/archive/{accountId}:
    get:
      tags:
        - Transactions
      summary: "Get Archived Transactions (Norwegian: bokført) with transactionId"
      operationId: Transactions_ListArchive
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's accountId can be retrieved with the list or read operation
            on the Accounts service.
          required: true
          schema:
            type: string
            nullable: true
        - name: startDate
          in: query
          description:
            "*Optional*. The start of the query time span. Must be less than
            or equal to `endDate`, and less than or equal to the current date + 1 day.
            Default value is `endDate` -30 days. Minimum value is `2000-01-01`"
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            "*Optional*. The end of the query time span. Must be greater
            than or equal to `startDate`, and less than or equal to the current date
            +1 day. Query cannot span more than 366 days. Default value is the current
            date."
          schema:
            type: string
            format: date-time
            nullable: true
        - name: index
          in: query
          description:
            "*Optional*. The `index` of the first item to be retrieved. Minimum
            value is `0`, which is the first item within the query time span. Default
            value is `0`."
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
            nullable: true
        - name: length
          in: query
          description:
            "*Optional*. Return a number of items items up to this value.
            Minimum value is `1`, maximum value is `1000`. The default value is `100`."
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            nullable: true
      responses:
        200:
          description: The list of transactions.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfArchiveTransaction"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfArchiveTransaction"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfArchiveTransaction"
  /api/v2/StandingOrders/{accountId}:
    get:
      tags:
        - StandingOrders
      summary: Lists the standing orders for repeated transfers and payments.
      operationId: StandingOrders_ListStandingOrders
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's `accountId` can be retrieved with the list or read operation
            on the Accounts service.
          required: true
          schema:
            type: string
            nullable: true
      responses:
        200:
          description: The list of standing orders.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfStandingOrder"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfStandingOrder"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfStandingOrder"
  /api/v2/Payments/{accountId}:
    get:
      tags:
        - Payments
      summary:
        List the payments. These payments are awaiting processing. Payments
        are processed on the due date.
      operationId: Payments_List
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's `accountId` can be retrieved with the list or read operation
            on the Accounts service.
          required: true
          schema:
            type: string
            nullable: true
        - name: index
          in: query
          description:
            "*Optional*. Return items with this `index` or greater. Minimum
            value is `0`, which is the first item within the query time span. Default
            value is `0`."
          schema:
            type: integer
            format: int32
            nullable: true
        - name: length
          in: query
          description:
            "*Optional*. Return a number of items items up to this value.
            Minimum value is `1`, maximum value is `1000`. The default value is `100`."
          schema:
            type: integer
            format: int32
            nullable: true
      responses:
        200:
          description:
            The list of payments. Notice that the returned `paymentId`
            is used as a key parameter other functions to identify the payment element.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfPayment"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfPayment"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfPayment"
  /api/v2/Payments/{accountId}/{paymentId}:
    get:
      tags:
        - Payments
      summary: Read a payment.
      operationId: Payments_Read
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's `accountId` can be retrieved with the list or read operation
            on the Accounts service.
          required: true
          schema:
            type: string
            nullable: true
        - name: paymentId
          in: path
          description:
            The `paymentId` of the payment. The `paymentId` can be retrieved
            with the list operation on this service.
          required: true
          schema:
            type: string
            nullable: true
      responses:
        200:
          description: The payment.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Payment"
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
            text/json:
              schema:
                $ref: "#/components/schemas/Payment"
  /api/v2/Mailbox/archive:
    get:
      tags:
        - Mailbox
      summary: List the messages in your archive
      operationId: Mailbox_ListArchive
      parameters:
        - name: index
          in: query
          description:
            Optional. The starting index of the message list to read, starting
            at 0 for the first page. Default value is 0.
          schema:
            type: integer
            format: int32
            nullable: false
            default: 0
        - name: length
          in: query
          description:
            Optional. The length of the page, minimum 1. Default value is
            100.
          schema:
            type: integer
            format: int32
            nullable: false
            default: 100
        - name: statusFilter
          in: query
          description:
            Optional. Only list messages with this status. If set to `null`
            messages are not filtered by status. Default value is `null`.
          schema:
            type: string
            nullable: true
            enum:
              - Unread
              - Read
            x-schema:
              $ref: "#/components/schemas/Status"
          x-schema:
            $ref: "#/components/schemas/Status"
        - name: startDate
          in: query
          description:
            Optional. Only list messages created on or after this date. If
            set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            Optional. Only list messages created before or on this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        200:
          description:
            The list of messages within the page query, also returns the
            total page count as determined by the page length of the query.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
  /api/v2/Mailbox/inbox:
    get:
      tags:
        - Mailbox
      summary: List the messages in your inbox
      operationId: Mailbox_ListInbox
      parameters:
        - name: index
          in: query
          description:
            Optional. The starting index of the message list to read, starting
            at 0 for the first page. Default value is 0.
          schema:
            type: integer
            format: int32
            nullable: false
            default: 0
        - name: length
          in: query
          description: The length of the page, minimum 1.
          schema:
            type: integer
            format: int32
            nullable: false
            default: 100
        - name: statusFilter
          in: query
          description:
            Optional. Only list messages with this status. If set to `null`
            messages are not filtered by status. Default value is `null`.
          schema:
            type: string
            nullable: true
            enum:
              - Unread
              - Read
            x-schema:
              $ref: "#/components/schemas/Status"
          x-schema:
            $ref: "#/components/schemas/Status"
        - name: startDate
          in: query
          description:
            Optional. Only list messages created on or after this date. If
            set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            Optional. Only list messages created before or on this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        200:
          description:
            The list of messages within the page query, also returns the
            total page count as determined by the page length of the query.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfMessageListItem"
  /api/v2/Mailbox/archive/{id}:
    get:
      tags:
        - Mailbox
      summary: Read a message from your archive.
      operationId: Mailbox_ReadArchive
      parameters:
        - name: id
          in: path
          description: The archive message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description:
            Returns a message item. If the message item does not exist
            this returns an error.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MessageItem"
            application/json:
              schema:
                $ref: "#/components/schemas/MessageItem"
            text/json:
              schema:
                $ref: "#/components/schemas/MessageItem"
    delete:
      tags:
        - Mailbox
      summary: Delete a message from your archive
      operationId: Mailbox_DeleteArchive
      parameters:
        - name: id
          in: path
          description: The archive message id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description: ""
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /api/v2/Mailbox/inbox/{id}:
    get:
      tags:
        - Mailbox
      summary: Read a message from your inbox
      operationId: Mailbox_ReadInbox
      parameters:
        - name: id
          in: path
          description: The inbox message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description:
            Returns a message item. If the message item does not exist
            this returns an error.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MessageItem"
            application/json:
              schema:
                $ref: "#/components/schemas/MessageItem"
            text/json:
              schema:
                $ref: "#/components/schemas/MessageItem"
    delete:
      tags:
        - Mailbox
      summary: Delete a message from your inbox
      operationId: Mailbox_DeleteInbox
      parameters:
        - name: id
          in: path
          description: The messageId
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description: ""
          content:
            "*/*":
              schema:
                type: string
                format: binary
  /api/v2/Mailbox/archive/{id}/move:
    put:
      tags:
        - Mailbox
      summary: Move a message from your archive to your inbox
      description:
        This operation is currently not supported and is only included
        for future implementation.
      operationId: Mailbox_MoveToInbox
      parameters:
        - name: id
          in: path
          description: The archive message id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description: Returns true if message was moved to the inbox.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
            application/json:
              schema:
                type: integer
                format: int64
            text/json:
              schema:
                type: integer
                format: int64
  /api/v2/Mailbox/inbox/{id}/move:
    put:
      tags:
        - Mailbox
      summary: Move a message from your inbox to your archive
      description:
        The moved message is assigned a archive message id that is distinct
        from its inbox message id.
      operationId: Mailbox_MoveToArchive
      parameters:
        - name: id
          in: path
          description: The inbox message id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      responses:
        200:
          description: Returns true if the message was moved to the archive.
          content:
            text/plain:
              schema:
                type: integer
                format: int64
            application/json:
              schema:
                type: integer
                format: int64
            text/json:
              schema:
                type: integer
                format: int64
  /api/v2/Mailbox/archive/{id}/readstatus:
    put:
      tags:
        - Mailbox
      summary:
        Sets the read/unread status of a message in your archive to the indicated
        value
      operationId: Mailbox_SetReadStatusArchive
      parameters:
        - name: id
          in: path
          description: The archive message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      requestBody:
        description: A request object that describes the desired settings to apply.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
          application/*+json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
        required: true
      responses:
        200:
          description: ""
          content:
            "*/*":
              schema:
                type: string
                format: binary
      x-codegen-request-body-name: value
  /api/v2/Mailbox/inbox/{id}/readstatus:
    put:
      tags:
        - Mailbox
      summary:
        Sets the read/unread status of a message in your inbox to the indicated
        value
      operationId: Mailbox_SetReadStatusInbox
      parameters:
        - name: id
          in: path
          description: The inbox message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
      requestBody:
        description: A request object that describes the desired settings to apply.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
          application/*+json:
            schema:
              $ref: "#/components/schemas/SetReadStatusRequest"
        required: true
      responses:
        200:
          description: ""
          content:
            "*/*":
              schema:
                type: string
                format: binary
      x-codegen-request-body-name: value
  /api/v2/Mailbox/archive/count:
    get:
      tags:
        - Mailbox
      summary: Count the number of messages in your archive
      description:
        StatusFilter=Read is currently not supported. It is only included
        for future implementation.
      operationId: Mailbox_CountArchiveMessage
      parameters:
        - name: statusFilter
          in: query
          description:
            Optional. Only count messages with this status. If set to `null`
            messages are not filtered by status. Default value is `null`.
          schema:
            type: string
            nullable: true
            enum:
              - Unread
              - Read
            x-schema:
              $ref: "#/components/schemas/Status"
          x-schema:
            $ref: "#/components/schemas/Status"
        - name: startDate
          in: query
          description:
            Optional. Only count messages created on or after this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            Optional. Only count messages created before or on this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        200:
          description: ""
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
  /api/v2/Mailbox/inbox/count:
    get:
      tags:
        - Mailbox
      summary: Count the number of messages in your inbox
      description:
        StatusFilter=Read is currently not supported. It is only included
        for future implementation.
      operationId: Mailbox_CountInboxMessage
      parameters:
        - name: statusFilter
          in: query
          description:
            Optional. Only count messages with this status. If set to `null`
            messages are not filtered by status. Default value is `null`.
          schema:
            type: string
            nullable: true
            enum:
              - Unread
              - Read
            x-schema:
              $ref: "#/components/schemas/Status"
          x-schema:
            $ref: "#/components/schemas/Status"
        - name: startDate
          in: query
          description:
            Optional. Only count messages created on or after this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
        - name: endDate
          in: query
          description:
            Optional. Only count messages created before or on this date.
            If set to `null` the filter is not applied. Default value is `null`.
          schema:
            type: string
            format: date-time
            nullable: true
      responses:
        200:
          description: ""
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
  /api/v2/Mailbox/archive/{messageId}/attachment/{attachmentId}:
    get:
      tags:
        - Mailbox
      summary: Read the attachment of an archive message.
      operationId: Mailbox_ReadArchiveAttachment
      parameters:
        - name: messageId
          in: path
          description: The archive message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
        - name: attachmentId
          in: path
          description: The attachment Id
          required: true
          schema:
            type: integer
            format: int32
            nullable: false
      responses:
        200:
          description: ""
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
            application/json:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
            text/json:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
  /api/v2/Mailbox/inbox/{messageId}/attachment/{attachmentId}:
    get:
      tags:
        - Mailbox
      summary: Read the attachment of an inbox message.
      operationId: Mailbox_ReadInboxAttachment
      parameters:
        - name: messageId
          in: path
          description: The inbox message Id
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
        - name: attachmentId
          in: path
          description: The attachment Id
          required: true
          schema:
            type: integer
            format: int32
            nullable: false
      responses:
        200:
          description: ""
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
            application/json:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
            text/json:
              schema:
                $ref: "#/components/schemas/MailboxAttachment"
  /api/v2/Customers:
    get:
      tags:
        - Customers
      summary: Get customer data
      operationId: Customers_Read
      responses:
        200:
          description: Customer data
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Customer"
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
            text/json:
              schema:
                $ref: "#/components/schemas/Customer"
  /api/v2/Cards:
    get:
      tags:
        - Cards
      summary: Lists the cards.
      operationId: Cards_List
      responses:
        200:
          description: The list of cards.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfCard"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfCard"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfCard"
  /api/v2/Accounts:
    get:
      tags:
        - Accounts
      summary: Lists the accounts.
      operationId: Accounts_List
      responses:
        200:
          description:
            A list of accounts. Notice that the returned `accountId` is
            used as a key parameter in many other functions instead of the `accountNumber`.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ListResultOfAccount"
            application/json:
              schema:
                $ref: "#/components/schemas/ListResultOfAccount"
            text/json:
              schema:
                $ref: "#/components/schemas/ListResultOfAccount"
  /api/v2/Accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Reads an account
      operationId: Accounts_Read
      parameters:
        - name: accountId
          in: path
          description:
            The `accountId` of the account. The account must be one owned
            by the customer, or an account the customer has been granted access to.
            An account's `accountId` can be retrieved with the list or read operation
            on this service.
          required: true
          schema:
            type: string
            nullable: true
      responses:
        200:
          description: An account
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Account"
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
            text/json:
              schema:
                $ref: "#/components/schemas/Account"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    TransferCreateRequest:
      required:
        - amount
        - fromAccountId
        - message
        - toAccountId
      type: object
      properties:
        fromAccountId:
          minLength: 1
          type: string
        toAccountId:
          minLength: 1
          type: string
        message:
          minLength: 1
          type: string
        amount:
          type: number
          format: decimal
    ListResultOfTransaction:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
    Transaction:
      required:
        - accountingDate
        - amount
        - cardDetailsSpecified
        - isReservation
        - otherAccountNumberSpecified
        - source
        - transactionDetailSpecified
        - transactionTypeCode
      type: object
      properties:
        accountingDate:
          type: string
          format: date-time
        interestDate:
          type: string
          format: date-time
        otherAccountNumber:
          type: string
        otherAccountNumberSpecified:
          type: boolean
        amount:
          type: number
          format: decimal
        text:
          type: string
        transactionType:
          type: string
        transactionTypeCode:
          type: integer
          format: int32
        transactionTypeText:
          type: string
        isReservation:
          type: boolean
        reservationType:
          $ref: "#/components/schemas/ReservationType"
        source:
          $ref: "#/components/schemas/SourceType"
        cardDetailsSpecified:
          type: boolean
        cardDetails:
          $ref: "#/components/schemas/CardDetails"
        transactionDetailSpecified:
          type: boolean
        transactionDetail:
          $ref: "#/components/schemas/TransactionDetail"
    ReservationType:
      type: string
      description: ""
      enum:
        - NotReservation
        - VisaReservation
        - PurchaseReservation
        - AtmReservation
      x-enumNames:
        - NotReservation
        - VisaReservation
        - PurchaseReservation
        - AtmReservation
    SourceType:
      type: string
      description: ""
      enum:
        - AccountStatement
        - Archive
      x-enumNames:
        - AccountStatement
        - Archive
    CardDetails:
      required:
        - currencyAmount
        - currencyRate
        - purchaseDate
      type: object
      properties:
        cardNumber:
          type: string
        currencyAmount:
          type: number
          format: decimal
        currencyRate:
          type: number
          format: decimal
        merchantCategoryCode:
          type: string
        merchantCategoryDescription:
          type: string
        merchantCity:
          type: string
        merchantName:
          type: string
        originalCurrencyCode:
          type: string
        purchaseDate:
          type: string
          format: date-time
        transactionId:
          type: string
    TransactionDetail:
      required:
        - numericReference
        - transactionId
      type: object
      properties:
        formattedAccountNumber:
          type: string
        transactionId:
          type: integer
          format: int64
        cid:
          type: string
        amountDescription:
          type: string
        receiverName:
          type: string
        numericReference:
          type: integer
          format: int64
        payerName:
          type: string
        registrationDate:
          type: string
          format: date-time
    ListResultOfArchiveTransaction:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/ArchiveTransaction"
    ArchiveTransaction:
      required:
        - accountingDate
        - amount
        - cardDetailsSpecified
        - source
        - transactionTypeCode
      type: object
      properties:
        transactionId:
          type: string
        accountingDate:
          type: string
          format: date-time
        interestDate:
          type: string
          format: date-time
        amount:
          type: number
          format: decimal
        text:
          type: string
        transactionType:
          type: string
        transactionTypeCode:
          type: integer
          format: int32
        transactionTypeText:
          type: string
        source:
          $ref: "#/components/schemas/SourceType"
        cardDetails:
          $ref: "#/components/schemas/CardDetails"
        cardDetailsSpecified:
          type: boolean
    ListResultOfStandingOrder:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/StandingOrder"
    StandingOrder:
      required:
        - amount
        - frequency
        - standingOrderId
        - standingOrderType
      type: object
      properties:
        amount:
          type: number
          format: decimal
        beneficiaryName:
          type: string
        cId:
          type: string
        creditAccountNumber:
          type: string
        debitAccountNumber:
          type: string
        freeTerms:
          type: array
          items:
            type: string
            format: date-time
        frequency:
          $ref: "#/components/schemas/StandingOrderFrequency"
        lastPaymentDate:
          type: string
          format: date-time
        nextDueDate:
          type: string
          format: date-time
        standingOrderEndDate:
          type: string
          format: date-time
        standingOrderId:
          type: integer
          format: int32
        standingOrderStartDate:
          type: string
          format: date-time
        standingOrderType:
          $ref: "#/components/schemas/StandingOrderType"
    StandingOrderFrequency:
      type: string
      description: ""
      enum:
        - Other
        - Weekly
        - Biweekly
        - Semimonthly
        - Monthly
        - Bimonthly
        - Quarterly
        - Yearly
        - Daily
      x-enumNames:
        - Other
        - Weekly
        - Biweekly
        - Semimonthly
        - Monthly
        - Bimonthly
        - Quarterly
        - Yearly
        - Daily
    StandingOrderType:
      type: string
      description: ""
      enum:
        - Payment
        - Transfer
        - Other
      x-enumNames:
        - Payment
        - Transfer
        - Other
    ListResultOfPayment:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
    Payment:
      required:
        - amount
        - dueDate
        - isActive
        - paymentNumber
      type: object
      properties:
        paymentId:
          type: string
        recipientAccountNumber:
          type: string
        amount:
          type: number
          format: decimal
        dueDate:
          type: string
          format: date-time
        kid:
          type: string
        text:
          type: string
        isActive:
          type: boolean
        status:
          type: string
        allowedNewStatusTypes:
          type: array
          items:
            $ref: "#/components/schemas/NewStatusType"
        statusDetails:
          type: string
        productType:
          type: string
        paymentType:
          type: string
        paymentNumber:
          type: integer
          format: int32
        beneficiaryName:
          type: string
    NewStatusType:
      type: string
      description: ""
      enum:
        - Stopped
        - Reactivated
        - IgnoreLimit
      x-enumNames:
        - Stopped
        - Reactivated
        - IgnoreLimit
    ListResultOfMessageListItem:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/MessageListItem"
    MessageListItem:
      required:
        - flag
        - id
        - receivedDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        subject:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        source:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        flag:
          type: integer
          format: int32
        receivedDate:
          type: string
          format: date-time
        attachmentId:
          type: integer
          format: int32
        linkName:
          type: string
        linkUrl:
          type: string
    Category:
      type: string
      description: ""
      enum:
        - General
        - News
      x-enumNames:
        - General
        - News
    Status:
      type: string
      description: ""
      enum:
        - Unread
        - Read
      x-enumNames:
        - Unread
        - Read
    MessageItem:
      required:
        - flag
        - id
        - receivedDate
      type: object
      properties:
        id:
          type: integer
          format: int64
        subject:
          type: string
        category:
          $ref: "#/components/schemas/Category"
        source:
          type: string
        status:
          $ref: "#/components/schemas/Status"
        flag:
          type: integer
          format: int32
        receivedDate:
          type: string
          format: date-time
        attachmentId:
          type: integer
          format: int32
        linkName:
          type: string
        linkUrl:
          type: string
        body:
          type: string
    SetReadStatusRequest:
      required:
        - status
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
    MailboxAttachment:
      required:
        - attachmentId
      type: object
      properties:
        attachmentId:
          type: integer
          format: int32
        name:
          type: string
        attachment:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    Customer:
      type: object
      properties:
        customerId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        postalAddress:
          $ref: "#/components/schemas/Address"
        streetAddress:
          $ref: "#/components/schemas/Address"
        phoneNumbers:
          type: array
          items:
            $ref: "#/components/schemas/PhoneNumber"
    Address:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressLine3:
          type: string
        addressLine4:
          type: string
        country:
          type: string
        zipCode:
          type: string
        city:
          type: string
    PhoneNumber:
      type: object
      properties:
        countryCode:
          type: string
        number:
          type: string
    ListResultOfCard:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Card"
    Card:
      required:
        - cardVersionNumber
        - expiryDate
        - productCode
        - status
      type: object
      properties:
        cardId:
          type: string
        cardNumber:
          type: string
        cardVersionNumber:
          type: integer
          format: int32
        accountNumber:
          type: string
        customerId:
          type: string
        expiryDate:
          type: string
          format: date-time
        accountOwner:
          type: string
        status:
          $ref: "#/components/schemas/CardStatus"
        cardType:
          type: string
        productCode:
          $ref: "#/components/schemas/ProductCode"
    CardStatus:
      type: string
      description: ""
      enum:
        - Unknown
        - Active
        - Inactive
        - Renewal
        - Deleted
        - Blocked
      x-enumNames:
        - Unknown
        - Active
        - Inactive
        - Renewal
        - Deleted
        - Blocked
    ProductCode:
      type: string
      description: ""
      enum:
        - DebitCard
        - DebitCardCL
        - CreditCard
        - CreditCardCL
        - DebitCardYouth
        - DebitCardYouthCL
        - X2XCard
        - X2XCardChild
        - X2XCardChildNet
        - ElectronCard
        - Unknown
      x-enumNames:
        - DebitCard
        - DebitCardCL
        - CreditCard
        - CreditCardCL
        - DebitCardYouth
        - DebitCardYouthCL
        - X2XCard
        - X2XCardChild
        - X2XCardChildNet
        - ElectronCard
        - Unknown
    ListResultOfAccount:
      required:
        - availableItems
      type: object
      properties:
        availableItems:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: "#/components/schemas/Account"
    Account:
      type: object
      properties:
        accountId:
          type: string
          description:
            The account identifier for use with other APIs that require
            AccountID.
        accountNumber:
          type: string
          description: The account's public account number
        ownerCustomerId:
          type: string
          description:
            The customerId of the person that owns the account, may be
            different from the queried customerId.
        name:
          type: string
          description: The name of the account. Not unique.
        accountType:
          type: string
          description: The type of the account. Descriptive.
        available:
          type: number
          description:
            The amount currently available on the account. This is the
            money available to spend. It will differ from the account balance, typically
            by credit limit and by pending transactions.
          format: decimal
        balance:
          type: number
          description: The current account balance. This is the money owned.
          format: decimal
        creditLimit:
          type: number
          description: The current credit limit on the account.
          format: decimal
security:
  - BearerAuth: []
