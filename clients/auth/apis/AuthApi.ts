/* tslint:disable */
/* eslint-disable */
/**
 * SBanken
 * SBanken Authnetication API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: rhuan@barreto.work
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TokenFailure,
  TokenSuccess,
} from '../models';
import {
    TokenFailureFromJSON,
    TokenFailureToJSON,
    TokenSuccessFromJSON,
    TokenSuccessToJSON,
} from '../models';

export interface GetTokenRequest {
    customerId: string;
    grantType?: GetTokenGrantTypeEnum;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Generates a JWT access token
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenSuccess>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.customerId !== undefined && requestParameters.customerId !== null) {
            headerParameters['customerId'] = String(requestParameters.customerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenSuccessFromJSON(jsonValue));
    }

    /**
     * Generates a JWT access token
     */
    async getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenSuccess> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetTokenGrantTypeEnum {
    ClientCredentials = 'client_credentials'
}
