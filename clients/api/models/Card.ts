/* tslint:disable */
/* eslint-disable */
/**
 * SBanken
 * SBanken Beta API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rhuan@barreto.work
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardStatus } from './CardStatus';
import {
    CardStatusFromJSON,
    CardStatusFromJSONTyped,
    CardStatusToJSON,
} from './CardStatus';
import type { ProductCode } from './ProductCode';
import {
    ProductCodeFromJSON,
    ProductCodeFromJSONTyped,
    ProductCodeToJSON,
} from './ProductCode';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    cardId?: string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    cardNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof Card
     */
    cardVersionNumber: number;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    customerId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Card
     */
    expiryDate: Date;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    accountOwner?: string;
    /**
     * 
     * @type {CardStatus}
     * @memberof Card
     */
    status: CardStatus;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    cardType?: string;
    /**
     * 
     * @type {ProductCode}
     * @memberof Card
     */
    productCode: ProductCode;
}

/**
 * Check if a given object implements the Card interface.
 */
export function instanceOfCard(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cardVersionNumber" in value;
    isInstance = isInstance && "expiryDate" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "productCode" in value;

    return isInstance;
}

export function CardFromJSON(json: any): Card {
    return CardFromJSONTyped(json, false);
}

export function CardFromJSONTyped(json: any, ignoreDiscriminator: boolean): Card {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cardId': !exists(json, 'cardId') ? undefined : json['cardId'],
        'cardNumber': !exists(json, 'cardNumber') ? undefined : json['cardNumber'],
        'cardVersionNumber': json['cardVersionNumber'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'expiryDate': (new Date(json['expiryDate'])),
        'accountOwner': !exists(json, 'accountOwner') ? undefined : json['accountOwner'],
        'status': CardStatusFromJSON(json['status']),
        'cardType': !exists(json, 'cardType') ? undefined : json['cardType'],
        'productCode': ProductCodeFromJSON(json['productCode']),
    };
}

export function CardToJSON(value?: Card | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cardId': value.cardId,
        'cardNumber': value.cardNumber,
        'cardVersionNumber': value.cardVersionNumber,
        'accountNumber': value.accountNumber,
        'customerId': value.customerId,
        'expiryDate': (value.expiryDate.toISOString()),
        'accountOwner': value.accountOwner,
        'status': CardStatusToJSON(value.status),
        'cardType': value.cardType,
        'productCode': ProductCodeToJSON(value.productCode),
    };
}

