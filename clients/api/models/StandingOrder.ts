/* tslint:disable */
/* eslint-disable */
/**
 * SBanken
 * SBanken Beta API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rhuan@barreto.work
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StandingOrderFrequency } from './StandingOrderFrequency';
import {
    StandingOrderFrequencyFromJSON,
    StandingOrderFrequencyFromJSONTyped,
    StandingOrderFrequencyToJSON,
} from './StandingOrderFrequency';
import type { StandingOrderType } from './StandingOrderType';
import {
    StandingOrderTypeFromJSON,
    StandingOrderTypeFromJSONTyped,
    StandingOrderTypeToJSON,
} from './StandingOrderType';

/**
 * 
 * @export
 * @interface StandingOrder
 */
export interface StandingOrder {
    /**
     * 
     * @type {number}
     * @memberof StandingOrder
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof StandingOrder
     */
    beneficiaryName?: string;
    /**
     * 
     * @type {string}
     * @memberof StandingOrder
     */
    cId?: string;
    /**
     * 
     * @type {string}
     * @memberof StandingOrder
     */
    creditAccountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof StandingOrder
     */
    debitAccountNumber?: string;
    /**
     * 
     * @type {Array<Date>}
     * @memberof StandingOrder
     */
    freeTerms?: Array<Date>;
    /**
     * 
     * @type {StandingOrderFrequency}
     * @memberof StandingOrder
     */
    frequency: StandingOrderFrequency;
    /**
     * 
     * @type {Date}
     * @memberof StandingOrder
     */
    lastPaymentDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StandingOrder
     */
    nextDueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StandingOrder
     */
    standingOrderEndDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof StandingOrder
     */
    standingOrderId: number;
    /**
     * 
     * @type {Date}
     * @memberof StandingOrder
     */
    standingOrderStartDate?: Date;
    /**
     * 
     * @type {StandingOrderType}
     * @memberof StandingOrder
     */
    standingOrderType: StandingOrderType;
}

/**
 * Check if a given object implements the StandingOrder interface.
 */
export function instanceOfStandingOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "frequency" in value;
    isInstance = isInstance && "standingOrderId" in value;
    isInstance = isInstance && "standingOrderType" in value;

    return isInstance;
}

export function StandingOrderFromJSON(json: any): StandingOrder {
    return StandingOrderFromJSONTyped(json, false);
}

export function StandingOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): StandingOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': json['amount'],
        'beneficiaryName': !exists(json, 'beneficiaryName') ? undefined : json['beneficiaryName'],
        'cId': !exists(json, 'cId') ? undefined : json['cId'],
        'creditAccountNumber': !exists(json, 'creditAccountNumber') ? undefined : json['creditAccountNumber'],
        'debitAccountNumber': !exists(json, 'debitAccountNumber') ? undefined : json['debitAccountNumber'],
        'freeTerms': !exists(json, 'freeTerms') ? undefined : json['freeTerms'],
        'frequency': StandingOrderFrequencyFromJSON(json['frequency']),
        'lastPaymentDate': !exists(json, 'lastPaymentDate') ? undefined : (new Date(json['lastPaymentDate'])),
        'nextDueDate': !exists(json, 'nextDueDate') ? undefined : (new Date(json['nextDueDate'])),
        'standingOrderEndDate': !exists(json, 'standingOrderEndDate') ? undefined : (new Date(json['standingOrderEndDate'])),
        'standingOrderId': json['standingOrderId'],
        'standingOrderStartDate': !exists(json, 'standingOrderStartDate') ? undefined : (new Date(json['standingOrderStartDate'])),
        'standingOrderType': StandingOrderTypeFromJSON(json['standingOrderType']),
    };
}

export function StandingOrderToJSON(value?: StandingOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'beneficiaryName': value.beneficiaryName,
        'cId': value.cId,
        'creditAccountNumber': value.creditAccountNumber,
        'debitAccountNumber': value.debitAccountNumber,
        'freeTerms': value.freeTerms,
        'frequency': StandingOrderFrequencyToJSON(value.frequency),
        'lastPaymentDate': value.lastPaymentDate === undefined ? undefined : (value.lastPaymentDate.toISOString()),
        'nextDueDate': value.nextDueDate === undefined ? undefined : (value.nextDueDate.toISOString()),
        'standingOrderEndDate': value.standingOrderEndDate === undefined ? undefined : (value.standingOrderEndDate.toISOString()),
        'standingOrderId': value.standingOrderId,
        'standingOrderStartDate': value.standingOrderStartDate === undefined ? undefined : (value.standingOrderStartDate.toISOString()),
        'standingOrderType': StandingOrderTypeToJSON(value.standingOrderType),
    };
}

