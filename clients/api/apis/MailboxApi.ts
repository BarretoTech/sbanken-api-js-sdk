/* tslint:disable */
/* eslint-disable */
/**
 * SBanken
 * SBanken Beta API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rhuan@barreto.work
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListResultOfMessageListItem,
  MailboxAttachment,
  MessageItem,
  SetReadStatusRequest,
} from '../models';
import {
    ListResultOfMessageListItemFromJSON,
    ListResultOfMessageListItemToJSON,
    MailboxAttachmentFromJSON,
    MailboxAttachmentToJSON,
    MessageItemFromJSON,
    MessageItemToJSON,
    SetReadStatusRequestFromJSON,
    SetReadStatusRequestToJSON,
} from '../models';

export interface MailboxCountArchiveMessageRequest {
    statusFilter?: MailboxCountArchiveMessageStatusFilterEnum;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface MailboxCountInboxMessageRequest {
    statusFilter?: MailboxCountInboxMessageStatusFilterEnum;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface MailboxDeleteArchiveRequest {
    id: number;
}

export interface MailboxDeleteInboxRequest {
    id: number;
}

export interface MailboxListArchiveRequest {
    index?: number;
    length?: number;
    statusFilter?: MailboxListArchiveStatusFilterEnum;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface MailboxListInboxRequest {
    index?: number;
    length?: number;
    statusFilter?: MailboxListInboxStatusFilterEnum;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface MailboxMoveToArchiveRequest {
    id: number;
}

export interface MailboxMoveToInboxRequest {
    id: number;
}

export interface MailboxReadArchiveRequest {
    id: number;
}

export interface MailboxReadArchiveAttachmentRequest {
    messageId: number;
    attachmentId: number;
}

export interface MailboxReadInboxRequest {
    id: number;
}

export interface MailboxReadInboxAttachmentRequest {
    messageId: number;
    attachmentId: number;
}

export interface MailboxSetReadStatusArchiveRequest {
    id: number;
    value: SetReadStatusRequest;
}

export interface MailboxSetReadStatusInboxRequest {
    id: number;
    value: SetReadStatusRequest;
}

/**
 * 
 */
export class MailboxApi extends runtime.BaseAPI {

    /**
     * StatusFilter=Read is currently not supported. It is only included for future implementation.
     * Count the number of messages in your archive
     */
    async mailboxCountArchiveMessageRaw(requestParameters: MailboxCountArchiveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.statusFilter !== undefined) {
            queryParameters['statusFilter'] = requestParameters.statusFilter;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * StatusFilter=Read is currently not supported. It is only included for future implementation.
     * Count the number of messages in your archive
     */
    async mailboxCountArchiveMessage(requestParameters: MailboxCountArchiveMessageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.mailboxCountArchiveMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * StatusFilter=Read is currently not supported. It is only included for future implementation.
     * Count the number of messages in your inbox
     */
    async mailboxCountInboxMessageRaw(requestParameters: MailboxCountInboxMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.statusFilter !== undefined) {
            queryParameters['statusFilter'] = requestParameters.statusFilter;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * StatusFilter=Read is currently not supported. It is only included for future implementation.
     * Count the number of messages in your inbox
     */
    async mailboxCountInboxMessage(requestParameters: MailboxCountInboxMessageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.mailboxCountInboxMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a message from your archive
     */
    async mailboxDeleteArchiveRaw(requestParameters: MailboxDeleteArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxDeleteArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Delete a message from your archive
     */
    async mailboxDeleteArchive(requestParameters: MailboxDeleteArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.mailboxDeleteArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a message from your inbox
     */
    async mailboxDeleteInboxRaw(requestParameters: MailboxDeleteInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxDeleteInbox.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Delete a message from your inbox
     */
    async mailboxDeleteInbox(requestParameters: MailboxDeleteInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.mailboxDeleteInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the messages in your archive
     */
    async mailboxListArchiveRaw(requestParameters: MailboxListArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResultOfMessageListItem>> {
        const queryParameters: any = {};

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.statusFilter !== undefined) {
            queryParameters['statusFilter'] = requestParameters.statusFilter;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResultOfMessageListItemFromJSON(jsonValue));
    }

    /**
     * List the messages in your archive
     */
    async mailboxListArchive(requestParameters: MailboxListArchiveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResultOfMessageListItem> {
        const response = await this.mailboxListArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the messages in your inbox
     */
    async mailboxListInboxRaw(requestParameters: MailboxListInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResultOfMessageListItem>> {
        const queryParameters: any = {};

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.statusFilter !== undefined) {
            queryParameters['statusFilter'] = requestParameters.statusFilter;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResultOfMessageListItemFromJSON(jsonValue));
    }

    /**
     * List the messages in your inbox
     */
    async mailboxListInbox(requestParameters: MailboxListInboxRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResultOfMessageListItem> {
        const response = await this.mailboxListInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The moved message is assigned a archive message id that is distinct from its inbox message id.
     * Move a message from your inbox to your archive
     */
    async mailboxMoveToArchiveRaw(requestParameters: MailboxMoveToArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxMoveToArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * The moved message is assigned a archive message id that is distinct from its inbox message id.
     * Move a message from your inbox to your archive
     */
    async mailboxMoveToArchive(requestParameters: MailboxMoveToArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.mailboxMoveToArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation is currently not supported and is only included for future implementation.
     * Move a message from your archive to your inbox
     */
    async mailboxMoveToInboxRaw(requestParameters: MailboxMoveToInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxMoveToInbox.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/{id}/move`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * This operation is currently not supported and is only included for future implementation.
     * Move a message from your archive to your inbox
     */
    async mailboxMoveToInbox(requestParameters: MailboxMoveToInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.mailboxMoveToInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read a message from your archive.
     */
    async mailboxReadArchiveRaw(requestParameters: MailboxReadArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxReadArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageItemFromJSON(jsonValue));
    }

    /**
     * Read a message from your archive.
     */
    async mailboxReadArchive(requestParameters: MailboxReadArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageItem> {
        const response = await this.mailboxReadArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read the attachment of an archive message.
     */
    async mailboxReadArchiveAttachmentRaw(requestParameters: MailboxReadArchiveAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailboxAttachment>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling mailboxReadArchiveAttachment.');
        }

        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling mailboxReadArchiveAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/{messageId}/attachment/{attachmentId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailboxAttachmentFromJSON(jsonValue));
    }

    /**
     * Read the attachment of an archive message.
     */
    async mailboxReadArchiveAttachment(requestParameters: MailboxReadArchiveAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailboxAttachment> {
        const response = await this.mailboxReadArchiveAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read a message from your inbox
     */
    async mailboxReadInboxRaw(requestParameters: MailboxReadInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageItem>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxReadInbox.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageItemFromJSON(jsonValue));
    }

    /**
     * Read a message from your inbox
     */
    async mailboxReadInbox(requestParameters: MailboxReadInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageItem> {
        const response = await this.mailboxReadInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read the attachment of an inbox message.
     */
    async mailboxReadInboxAttachmentRaw(requestParameters: MailboxReadInboxAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailboxAttachment>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling mailboxReadInboxAttachment.');
        }

        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling mailboxReadInboxAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/{messageId}/attachment/{attachmentId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))).replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailboxAttachmentFromJSON(jsonValue));
    }

    /**
     * Read the attachment of an inbox message.
     */
    async mailboxReadInboxAttachment(requestParameters: MailboxReadInboxAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailboxAttachment> {
        const response = await this.mailboxReadInboxAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the read/unread status of a message in your archive to the indicated value
     */
    async mailboxSetReadStatusArchiveRaw(requestParameters: MailboxSetReadStatusArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxSetReadStatusArchive.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling mailboxSetReadStatusArchive.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/archive/{id}/readstatus`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetReadStatusRequestToJSON(requestParameters.value),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Sets the read/unread status of a message in your archive to the indicated value
     */
    async mailboxSetReadStatusArchive(requestParameters: MailboxSetReadStatusArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.mailboxSetReadStatusArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the read/unread status of a message in your inbox to the indicated value
     */
    async mailboxSetReadStatusInboxRaw(requestParameters: MailboxSetReadStatusInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mailboxSetReadStatusInbox.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling mailboxSetReadStatusInbox.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Mailbox/inbox/{id}/readstatus`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetReadStatusRequestToJSON(requestParameters.value),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Sets the read/unread status of a message in your inbox to the indicated value
     */
    async mailboxSetReadStatusInbox(requestParameters: MailboxSetReadStatusInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.mailboxSetReadStatusInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum MailboxCountArchiveMessageStatusFilterEnum {
    Unread = 'Unread',
    Read = 'Read'
}
/**
  * @export
  * @enum {string}
  */
export enum MailboxCountInboxMessageStatusFilterEnum {
    Unread = 'Unread',
    Read = 'Read'
}
/**
  * @export
  * @enum {string}
  */
export enum MailboxListArchiveStatusFilterEnum {
    Unread = 'Unread',
    Read = 'Read'
}
/**
  * @export
  * @enum {string}
  */
export enum MailboxListInboxStatusFilterEnum {
    Unread = 'Unread',
    Read = 'Read'
}
