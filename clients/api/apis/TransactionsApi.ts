/* tslint:disable */
/* eslint-disable */
/**
 * SBanken
 * SBanken Beta API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: rhuan@barreto.work
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListResultOfArchiveTransaction,
  ListResultOfTransaction,
} from '../models';
import {
    ListResultOfArchiveTransactionFromJSON,
    ListResultOfArchiveTransactionToJSON,
    ListResultOfTransactionFromJSON,
    ListResultOfTransactionToJSON,
} from '../models';

export interface TransactionsListRequest {
    accountId: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    index?: number | null;
    length?: number | null;
}

export interface TransactionsListArchiveRequest {
    accountId: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    index?: number | null;
    length?: number | null;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Get Transactions
     */
    async transactionsListRaw(requestParameters: TransactionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResultOfTransaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling transactionsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Transactions/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResultOfTransactionFromJSON(jsonValue));
    }

    /**
     * Get Transactions
     */
    async transactionsList(requestParameters: TransactionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResultOfTransaction> {
        const response = await this.transactionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Archived Transactions (Norwegian: bokført) with transactionId
     */
    async transactionsListArchiveRaw(requestParameters: TransactionsListArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResultOfArchiveTransaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling transactionsListArchive.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.index !== undefined) {
            queryParameters['index'] = requestParameters.index;
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/Transactions/archive/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResultOfArchiveTransactionFromJSON(jsonValue));
    }

    /**
     * Get Archived Transactions (Norwegian: bokført) with transactionId
     */
    async transactionsListArchive(requestParameters: TransactionsListArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResultOfArchiveTransaction> {
        const response = await this.transactionsListArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
